version: "3.5"
services:
  # Orion is the context broker
  orion:
    image: fiware/orion-ld
    hostname: orion
    container_name: fiware-orion
    restart: always
    depends_on:
      - mongo-db
      - ld-context
    networks:
      - default
    expose:
      - "1026"
    ports:
      - "1026:1026"
    command: -dbhost mongo-db -logLevel DEBUG -forwarding
    healthcheck:
      test: curl --fail -s http://orion:1026/version || exit 1
      interval: 5s


  mongo-db:
    image: mongo:3.6
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "27017"
    ports:
      - "27017:27017"
    networks:
      - default
    command: --nojournal
    volumes:
      - mongo-db:/data
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1    
      interval: 5s


  mosquitto:
    image: eclipse-mosquitto:1.6.14
    hostname: mosquitto
    container_name: mosquitto
    restart: always
    expose:
        - "1883"
        - "9001"
    ports:
        - "1883:1883"
        - "9001:9001"
    volumes:
        - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
        - ./mosquitto/mosquitto.passwd:/mosquitto/config/mosquitto.passwd
    networks:
        - default


  iot-agent:
    image: fiware/iotagent-json:latest
    hostname: iot-agent
    container_name: fiware-iot-agent
    restart: always
    depends_on:
        - mongo-db
        - ld-context
        - mosquitto
    networks:
        - default
    expose:
        - "4041"
        - "7896"
    ports:
        - "4041:4041"
        - "7896:7896"
    environment:
        - IOTA_CB_HOST=orion
        - IOTA_CB_PORT=1026
        - IOTA_NORTH_PORT=4041
        - IOTA_REGISTRY_TYPE=mongodb
        - IOTA_LOG_LEVEL=DEBUG
        - IOTA_TIMESTAMP=true
        - IOTA_AUTOCAST=true
        - IOTA_MONGO_HOST=mongo-db
        - IOTA_MONGO_PORT=27017
        - IOTA_MONGO_DB=iotagentjson
        - IOTA_PROVIDER_URL=http://iot-agent:4041
        - IOTA_HTTP_PORT=7896
        - IOTA_CB_NGSI_VERSION=ld
        - IOTA_JSON_LD_CONTEXT=http://context/ngsi-context.jsonld
        - IOTA_FALLBACK_TENANT=openiot
        - IOTA_MQTT_HOST=mosquitto
        - IOTA_MQTT_PORT=1883
        - IOTA_MQTT_USERNAME=LegoDemonstrator
        - IOTA_MQTT_PASSWORD=Lego12Demo34nstr56ator
        - IOTA_MQTT_REJECT_UNAUTHORIZED=true
        - IOTA_MQTT_PROTOCOL=mqtt
        - IOTA_MQTT_QOS=0
        - IOTA_MQTT_RETAIN=false
        - IOTA_MQTT_RETRIES=2
        - IOTA_MQTT_RETRY_TIME=5
        - IOTA_MQTT_KEEPALIVE=60
        - IOTA_MQTT_AVOID_LEADING_SLASH=0
        - IOTA_MQTT_CLIENT_ID=iotagent
        - IOTA_DEFAULT_RESOURCE=/iot/d
    healthcheck:
        interval: 30s



  quantum-leap:
    image: orchestracities/quantumleap
    hostname: quantum-leap
    container_name: quantum-leap
    restart: always
    ports:
        - "8668:8668"
    depends_on:
        - crate-db
        - redis-db
    networks:
      - default
    environment:
        - CRATE_HOST=crate-db
        - REDIS_HOST=redis-db
        - REDIS_PORT="6379"
    healthcheck:
      test: curl --fail -s http://quantumleap:8668/version || exit 1


  ld-context:
    image: httpd:alpine
    hostname: context
    container_name: fiware-ld-context
    restart: always
    ports:
      - "3004:80"
    volumes:
      - data-models:/usr/local/apache2/htdocs/
    networks:
      - default
    healthcheck:
      test: (wget --server-response --spider --quiet  http://ld-context/ngsi-context.jsonld 2>&1 | awk 'NR==1{print $$2}'|  grep -q -e "200") || exit 1

  redis-db:
    image: redis:6.2.3
    hostname: redis-db
    container_name: db-redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - default
    volumes:
      - redis-db:/data
    healthcheck:
      test: |
        host=`hostname -i || echo '127.0.0.1'`;
        ping=`redis-cli -h "$host" ping` && [ "$ping" = 'PONG' ] && echo 0 || echo 1
      interval: 10s

  crate-db:
    image: crate:4.1.4
    hostname: crate-db
    container_name: db-crate
    ports:
        - "4200:4200"
        - "4300:4300"
    command: 
      crate -Cauth.host_based.enabled=false  -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*"     
    environment:
      - CRATE_HEAP_SIZE=2g
    volumes:
      - crate-db:/data

  grafana:
    image: grafana/grafana:6.1.6
    container_name: grafana
    depends_on:
      - crate-db
    ports:
      - "3003:3000"
    environment:
      - GF_INSTALL_PLUGINS=https://github.com/orchestracities/grafana-map-plugin/archive/master.zip;grafana-map-plugin,grafana-clock-panel,grafana-worldmap-panel
    volumes:
      - grafana:/var/lib/grafana


volumes:
  crate-db: ~
  redis-db: ~
  grafana: ~
  mongo-db: ~
  data-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data-models


networks:
  default:
    ipam:
      config:
        - subnet: 172.18.1.0/24